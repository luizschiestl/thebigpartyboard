{"version":3,"sources":["pages/DrawingBoard.js","pages/DisplayBoard.js","App.js","serviceWorker.js","index.js"],"names":["DrawingBoard","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","canvasWidth","window","innerWidth","canvasHeight","innerHeight","brushColor","brushRadius","save","socket","inherits","createClass","key","value","setState","Math","random","toString","slice","on","initSocket","updateDimensions","setColor","addEventListener","bind","removeEventListener","_save","asyncToGenerator","regenerator_default","a","mark","_callee","saveableCanvas","saveData","wrap","_context","prev","next","getSaveData","emit","height","width","clear","stop","_x","apply","arguments","_this2","react_default","createElement","es","hideGrid","lazyRadius","catenaryColor","ref","canvasDraw","backgroundColor","className","onClick","undo","Component","DisplayBoard","loadSavedData","_ref","obj","JSON","parse","minX","minY","maxX","maxY","lines","map","line","points","point","x","y","newHeight","newWidth","componentList","push","disabled","loadTimeOffset","loadableCanvas","stringify","divWidth","divHeight","console","log","_componentDidMount","localUrl","component","index","Fragment","qrcode_react_lib_default","bgColor","fgColor","size","io","App","HashRouter","Switch","Route","exact","path","render","DrawingBoard_DrawingBoard","DisplayBoard_DisplayBoard","process","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa889fd5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\n\r\nexport class DrawingBoard extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            canvasWidth: window.innerWidth,\r\n            canvasHeight: window.innerHeight,\r\n            brushColor: props.brushColor,\r\n            brushRadius: 10,\r\n            save: null,\r\n            socket: null\r\n        };\r\n    }\r\n\r\n    setColor() {\r\n        this.setState({\r\n            brushColor:\r\n                \"#\" +\r\n                Math.random()\r\n                    .toString(16)\r\n                    .slice(2, 8)\r\n        });\r\n    }\r\n\r\n    initSocket() {\r\n        const { socket } = this.props;\r\n        socket.on(\"connect\", () => {});\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.setState({\r\n            canvasWidth: window.innerWidth,\r\n            canvasHeight: window.innerHeight - 80\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initSocket();\r\n        this.updateDimensions();\r\n        this.setColor();\r\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    switchToEraser() {\r\n        this.setState({\r\n            brushColor: \"#ffffff\",\r\n            brushRadius: 30\r\n        });\r\n    }\r\n\r\n    switchToBrush() {\r\n        this.setState({\r\n            brushColor: this.props.brushColor,\r\n            brushRadius: 10\r\n        });\r\n    }\r\n\r\n    async save(saveableCanvas) {\r\n        const saveData = saveableCanvas.getSaveData();\r\n        await this.setState({ save: saveData });\r\n        const { socket } = this.props;\r\n        socket.emit(\"savedDrawing\", {\r\n            save: this.state.save,\r\n            height: this.state.canvasHeight,\r\n            width: this.state.canvasWidth\r\n        });\r\n        saveableCanvas.clear();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CanvasDraw\r\n                    canvasWidth={this.state.canvasWidth}\r\n                    canvasHeight={this.state.canvasHeight}\r\n                    hideGrid={true}\r\n                    lazyRadius={0}\r\n                    brushColor={this.state.brushColor}\r\n                    brushRadius={this.state.brushRadius}\r\n                    catenaryColor=\"rgba(0, 0, 0, 0)\"\r\n                    ref={canvasDraw => (this.saveableCanvas = canvasDraw)}\r\n                    backgroundColor=\"rgba(0,0,0,0)\"\r\n                />\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => this.saveableCanvas.undo()}>\r\n                        Undo\r\n                    </button>\r\n                    <button onClick={() => this.saveableCanvas.clear()}>\r\n                        Clear\r\n                    </button>\r\n                    <button onClick={() => this.save(this.saveableCanvas)}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport QRCode from \"qrcode.react\";\r\n\r\nexport class DisplayBoard extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            divWidth: window.innerWidth,\r\n            divHeight: window.innerHeight,\r\n            componentList: [],\r\n            socket: null,\r\n            save: null\r\n        };\r\n    }\r\n\r\n    initSocket() {\r\n        const { socket } = this.props;\r\n        socket.on(\"connect\", () => {\r\n            console.log(\"Connected\");\r\n        });\r\n        this.setState({ socket });\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.setState({\r\n            divWidth: window.innerWidth,\r\n            divHeight: window.innerHeight - 50\r\n        });\r\n    }\r\n\r\n    loadSavedData = () => {\r\n        this.state.socket.on(\"savedDrawing\", ({ save, height, width }) => {\r\n            if (save) {\r\n                const obj = JSON.parse(save);\r\n                let minX = width;\r\n                let minY = height;\r\n                let maxX = 0;\r\n                let maxY = 0;\r\n                // eslint-disable-next-line\r\n                obj.lines.map(line =>\r\n                    // eslint-disable-next-line\r\n                    line.points.map(point => {\r\n                        if (minX > point.x) {\r\n                            minX = point.x;\r\n                        }\r\n                        if (minY > point.y) {\r\n                            minY = point.y;\r\n                        }\r\n                        if (maxX < point.x) {\r\n                            maxX = point.x;\r\n                        }\r\n                        if (maxY < point.y) {\r\n                            maxY = point.y;\r\n                        }\r\n                    })\r\n                );\r\n                // eslint-disable-next-line\r\n                obj.lines.map(line =>\r\n                    // eslint-disable-next-line\r\n                    line.points.map(point => {\r\n                        point.x = point.x - minX + 15;\r\n                        point.y = point.y - minY + 15;\r\n                    })\r\n                );\r\n                obj.width = maxX - minX + 30;\r\n                obj.height = maxY - minY + 30;\r\n                let newHeight = 0;\r\n                let newWidth = 0;\r\n                if (obj.width > obj.height) {\r\n                    newWidth = 300;\r\n                    newHeight = (300 * obj.height) / obj.width;\r\n                } else {\r\n                    newWidth = (300 * obj.width) / obj.height;\r\n                    newHeight = 300;\r\n                }\r\n\r\n                const componentList = this.state.componentList;\r\n                componentList.push(\r\n                    <CanvasDraw\r\n                        disabled={true}\r\n                        loadTimeOffset={10}\r\n                        className=\"moving-canvas\"\r\n                        brushColor=\"rgba(0,0,0,0)\"\r\n                        catenaryColor=\"rgba(0, 0, 0, 0)\"\r\n                        canvasWidth={newWidth}\r\n                        canvasHeight={newHeight}\r\n                        hideGrid={true}\r\n                        ref={canvasDraw => (this.loadableCanvas = canvasDraw)}\r\n                        saveData={JSON.stringify(obj)}\r\n                        backgroundColor=\"rgba(0,0,0,0)\"\r\n                    />\r\n                );\r\n                this.setState(componentList);\r\n            }\r\n        });\r\n    };\r\n\r\n    async componentDidMount() {\r\n        await this.initSocket();\r\n        this.loadSavedData();\r\n        this.updateDimensions();\r\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    render() {\r\n        let componentList = this.state.componentList;\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"title-board\">\r\n                        <h2>The Big Party Board!</h2>\r\n                        <h3>Go to {this.props.localUrl}/#/draw to start</h3>\r\n                    </div>\r\n                    <div\r\n                        className=\"display-board\"\r\n                        width={this.state.divWidth}\r\n                        height={this.state.divHeight}\r\n                    >\r\n                        {componentList.map((component, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {component}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <QRCode\r\n                    className=\"qrcode\"\r\n                    value={this.props.localUrl + \"/#/draw\"}\r\n                    bgColor=\"#000\"\r\n                    fgColor=\"#fff\"\r\n                    size={148}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport io from \"socket.io-client\";\n\nimport \"./App.css\";\nimport { DrawingBoard } from \"./pages/DrawingBoard\";\nimport { DisplayBoard } from \"./pages/DisplayBoard\";\n\nconst socket = io();\n\nfunction App() {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route\n                    exact\n                    path=\"/draw\"\n                    render={() => <DrawingBoard socket={socket} />}\n                />\n                <Route\n                    exact\n                    path=\"/\"\n                    render={() => (\n                        <DisplayBoard\n                            socket={socket}\n                            localUrl={process.env.REACT_APP_URL}\n                        />\n                    )}\n                />\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}